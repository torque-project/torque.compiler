;; -*- mode: clojure;-*-

(ns torque.compiler.runtime
  (:require
    [torque.compiler.builtins :as builtin]
    [torque.compiler.emit :as emit]
    [torque.compiler.generators :as gen]
    [torque.lang.debug :as d]))

(def printable    0)
(def counted      2)
(def coll         4)
(def associative  9)
(def equiv        21)
(def ifn          43)
(def serializable 45)
(def pointer      46)

(defn ^:private binary-to-pointer [type]
  (println "...")
  (->> (emit/define-fun!
         (emit/mangle-method builtin/binary-type-name "IPointerTarget" "-intptr" 1)
         emit/ValueP [(emit/ptr-of type)]
         (fn [fun]
          (println "...")
          (-> (emit/get-field (emit/arg fun 0) 2)
              (emit/force-box))))
       (hash-map :arity 0 :value)
       (list)))

(defn ^:private binary-size [type]
  (->> (emit/define-fun!
         (emit/mangle-method builtin/binary-type-name "ICounted" "-count" 1)
         emit/ValueP [(emit/ptr-of type)]
         (fn [fun]
           (emit/force-box (emit/get-field (emit/arg fun 0) 1))))
       (hash-map :arity 0 :value)
       (list)))

(defn ^:private binary-equiv [type]
  (->> (emit/define-fun!
         (emit/mangle-method builtin/binary-type-name "IEquiv" "-equiv" 2)
         emit/ValueP [(emit/ptr-of type) (emit/ptr-of type)]
         (fn [fun]
           (let [self  (emit/arg fun 0)
                 other (emit/arg fun 1)]
             (emit/short-and
               (fn []
                 (emit/instance-of (builtin/binary) other))
               (fn []
                 (emit/cmp emit/eq
                   (emit/get-field self 1)
                   (emit/get-field other 1)))
               (fn []
                 (emit/cmp emit/eq
                   emit/zero
                   (emit/memcmp
                     (emit/get-field self 2)
                     (emit/get-field other 2)
                     (emit/get-field self 1))))))))
       (hash-map :arity 1 :value)
       (list)))

(defn ^:private emit-integer-type []
  (gen/type builtin/integer-type-name
    [{:type emit/int64 :name 'value :field-id 1}]
    (fn [type]
      [])))

(defn ^:private emit-binary-type []
  ;; TODO: implement protocol methods
  (gen/type builtin/binary-type-name
    [{:type emit/int64 :name 'size :field-id 0}
     {:type emit/int8-ptr :name 'data :field-id 1}]
    (fn [type]
      [(gen/protocol* builtin/binary-type-name pointer (binary-to-pointer type))
       (gen/protocol* builtin/binary-type-name counted (binary-size type))
       (gen/protocol* builtin/binary-type-name equiv   (binary-equiv type))])))

(defn ^:private emit-array-type []
  ;; TODO: implement protocol methods
  (gen/type builtin/array-type-name
    [{:type emit/int64 :name 'size :field-id 0}
     {:type (emit/ptr-of emit/ValueP) :name 'data :field-id 1}]
    (fn [type]
      [])))

(defn rt0 []
  (emit/with-unit (emit/unit "__torque_rt0")
    (emit-binary-type)
    ;; (emit-integer-type)
    (emit-array-type)))
