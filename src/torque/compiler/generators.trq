(ns torque.compiler.generators
  (:require
    [torque.compiler.builtins :as builtin]
    [torque.compiler.emit :as emit]))

(def max-field-length 256)

(defn ^:private load-extensions [type]
  (emit/get-field type emit/type-exts))

(defn ^:private load-extension [extensions id]
  (emit/deref extensions [id emit/one]))

(defn ^:private load-dispatch-table [protocol idx arity]
  (emit/deref protocol [idx emit/zero arity]))

(defn ^:private emit-protocol-call [callable protocol meth arity args]
  (let [ptr  (load-dispatch-table protocol meth arity)
        fun  (emit/fun-from-args ptr emit/ValueP args)]
    (emit/call fun args)))

(defn ^:private emit-protocol-call* [callable id meth arity args]
  (emit-protocol-call callable
    (load-extension
      (load-extensions (emit/value-type callable))
      (emit/int emit/int32 id))
    (emit/int emit/int32 meth)
    (emit/int emit/int32 (inc arity))
    (cons callable args)))

(defn find-protocol [type protocol]
  (let [extensions (load-extensions type)
        size       (emit/get-field type emit/type-num-exts)
        idx        (emit/mutable-local emit/zero "nexts")]
    (emit/in-block "dispatch"
      (fn [block]
        (emit/if* emit/methods
          (fn []
            (->> (emit/load idx "idx") (emit/cmp emit/gt size)))
          (fn []
            (emit/if* emit/methods
              (fn []
                (let [cur (emit/load idx "idx")
                      id  (emit/deref extensions [cur emit/zero])]
                  (emit/cmp emit/eq id protocol)))
              (fn []
                (load-extension extensions (emit/load idx "idx")))
              (fn []
                (emit/store idx (emit/add (emit/load idx "id") emit/one))
                (emit/recur* block))))
          (fn []
            emit/not-implemented))))))

(defn ^:private fixed-args [fun max-fixed-arity]
  (map (partial emit/fn-arg fun) (range max-fixed-arity)))

(defn ^:private mangle-forwarder [arity max-fixed-arity]
  (str "__rest_arg_forwarder_" arity "_" max-fixed-arity))

(defn ^:private variadic-forwarder [arity max-fixed-arity]
  (emit/define-fun! (mangle-forwarder arity max-fixed-arity)
       {:link :once}
       emit/ValueP (vec (repeat (inc arity) emit/ValueP))
       (fn [fun]
         ;; accumulate args and call rest arg arity
         (let [count (- arity max-fixed-arity)
               arr   (builtin/make-array (emit/int arity))]
           (dotimes [n count]
             (builtin/aset arr (emit/int n) (emit/fn-arg fun n)))
           ;; call thru to actual impl
           (emit-protocol-call*
            (emit/arg fun 0)
            0 0 max-fixed-arity
            (concat (fixed-args fun max-fixed-arity) [arr]))))))

(defn ^:private variadic-forwarders [arities max-fixed-arity]
  (if (< max-fixed-arity 7)
    (let [start-arity (+ max-fixed-arity 2)]
      (reduce
        (fn [v arity]
          (->> (-> (variadic-forwarder arity max-fixed-arity)
                   (emit/value)
                   (emit/bitcast emit/int8-ptr))
               (assoc v arity)))
        arities
        (take (- 8 start-arity) (iterate inc start-arity))))))

(defn ^:private protocol-meth [arities]
  (->> (reduce
         (fn [v impl]
           (let [fun-ptr (emit/bitcast (:value impl) emit/int8-ptr)
                 out     (assoc v (inc (:arity impl)) fun-ptr)]
             (if (:variadic? impl)
               (variadic-forwarders out (:arity impl))
               out)))
         (vec (replicate 8 emit/nil*))
         arities)
       (emit/array emit/int8-ptr)
       (vector)
       (emit/struct emit/arities-table)))

(defn swizzle-cast [type val]
  (emit/bitcast val type))

(defn protocol [name id impls]
  (->> impls
       (mapv
         (fn [impl]
           (protocol-meth impl)))
       (emit/array emit/arities-table)
       (emit/global (str name "_methods"))
       (swizzle-cast (emit/ptr-of emit/arities-table))
       (vector (emit/int emit/int32 id))
       (emit/struct emit/dispatch-entry)))

(defn protocol* [name id & impls]
  (protocol name id impls))

(defn import-strcmp []
  (emit/declare-fun! "strncmp" emit/int32
    [emit/int8-ptr emit/int8-ptr emit/int64]))

(defn compare-field [this str strcmp]
  (fn [field]
    (let [field-name (emit/global ".field" (emit/string (name (:name field))))]
      (fn []
        (emit/select
          (->> [field-name str (emit/int max-field-length)]
               (emit/call strcmp)
               (emit/cmp emit/eq emit/zero))
          (emit/box (emit/get-field this (inc (:field-id field))))
          emit/nil*)))))

(defn field-selector [name type fields]
  (let [strcmp (import-strcmp)
        name   (str name "_get_field")]
    (emit/define-fun! name emit/ValueP
      [(emit/ptr-of type) emit/int8-ptr]
      (fn [fun]
        (let [this        (emit/arg fun 0)
              str         (emit/arg fun 1)
              field-tests (map (compare-field this str strcmp) fields)]
          (emit/cond* emit/ValueP field-tests (fn [] emit/nil*)))))))

(defn ctor [name type instance-struct field-types]
  (emit/define-fun! (str name "_new") emit/ValueP (cons emit/int8-ptr field-types)
    (fn [fun]
      (let [instance (emit/bitcast (emit/arg fun 0) (emit/ptr-of instance-struct))]
        (emit/set-field instance 0 type)
        (loop [n     0
               types field-types]
          (when-let [field-type (first types)]
            (emit/set-field instance (inc n) (emit/arg fun (inc n)))
            (recur (inc n) (next types))))
        (emit/bitcast instance emit/ValueP)))))

(defn field-type [field]
  (:type field emit/ValueP))

(defn type [name fields protocol-fn]
  (let [field-types    (map field-type fields)
        instance-type  (emit/define-struct name (vec (cons emit/TypeP field-types)))
        type           (emit/global name emit/ValueType nil)
        protocols      (protocol-fn instance-type)
        table-size     (emit/int emit/int32 (count protocols))
        protocol-table (emit/bitcast
                         (emit/global (str name "_entries")
                                      (emit/array emit/dispatch-entry protocols))
                         emit/dispatch-table)
        num-fields     (emit/int emit/int32 (count fields))
        field-selector (field-selector name instance-type fields)]
    (emit/set-global! type
      (emit/struct emit/ValueType
                   [table-size
                    protocol-table
                    num-fields
                    (emit/bitcast field-selector emit/int8-ptr)]))
    (ctor name type instance-type field-types)
    instance-type))
